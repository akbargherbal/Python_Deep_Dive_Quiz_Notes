Deep Dive 1: Python
	5. Function Parameters

Full of useful tips & tricks
------------------------------------

What is the result of the following python code:
list_01 = [1,2,3,4,5,6]
a,b = a, *b

=================

What is the result of the following python code:
list_01 = [1,2,3]
list_02 = [4,5,6]

l = [*list_01, *list_02]

=================
What is the result of the following code:
x = "python"

a, *b, c = x

=================

What is the result of the following code:
dict_01 = {"a": 1, "b": 2, "c": 3, "d": 4}

for i in dict_01:
	print(i)
=================

What is the result of the following code:
dict_01 = {"a": 1, "b": 2, "c": 3, "d": 4}

for i in dict_01.items():
	print(i)
=================
Unpacking a dictionary keys:

dict_01 = {"a": 1, "b": 2, "c": 3, "d": 4}
dict_02 = {"e": 10, "d": 12, "f": 23, "g": 4}
dict_03 = {"h": 0, "i": 1, "f": 2, "k": 40}

You can unpack a dictionaries keys into a list; or a set.

This way:

list_01 = [*dict_01, *dict_02, *dict_03]

	Notice duplicate keys.
	
set_01 = {*dict_01, *dict_02, *dict_03}
	Notice duplicate keys are gone!

=================

Merging multiple dictionaries:

dict_01 = {"a": 1, "b": 2, "c": 3, "d": 4}
dict_02 = {"e": 10, "d": 12, "f": 23, "g": 4}
dict_03 = {"h": 0, "i": 1, "f": 2, "k": 40}

dict_04 = {**dict_01, **dict_02, **dict_03}

Notice latest key-value pairs are kept only!


You can also unpack dictionary on the go; consider:

dict_05 = {"aa": 11, "bb": 12, **dict_04, "cc":13}
Notice when duplicate keys exist in unpacking; only the latest pairs of key-value are kept.
=================

What is the result of the following python code:
a, *b, (c, *d) = [1, 2, 3, "python"]

a = 1
b = [2, 3]
c = "p"
d = ["y", "t", "h", "o", "n"]

=================
What is the result of the following python code:
a = [1,3,4,6]
b = "python"

l = [*a, *b]

=================
You'd better review videos on unpacking and extended unpacking ... lots of cool tricks!
=================
The start (*) unpacking is helpful in some situations, consider this:

s1 = {1, 2, 3, 5, 7}
s2 = {12, 222, 3, 25, 87, 77}
s3 = {1, 22, 30, 251, 7, 23}
s4 = {10, 82, 30, 251, 7, 5, 9}


Using traditional set union might be cumbersome; instead use the following

s5 = {*s1, *s2, *s3, *s4}

you can unpack to a list too.
l5 = [*s1, *s2, *s3, *s4]

That's equivalent to:
s5 = s1.union(s2).union(s3).union(s4)
s5 = s1.union(s2, s3, s4, s5)
=================

What is the result of the following python code:
a, b, (c, d, *e) = [1, 2, "python"]

=================
What is the result of the following python code:
a, b, (c, *d, e) = [1, 2, "python"]
=================

args & *args

def func_01(a, b, *c):
	code

func_01(10, 20, "x", "y")

Notice that:
	a = 10
	b = 20
	c = ("x", "y")		<-------------- tuple; not a list like in normal star (*) unpacking!

=================

def func_01(a, b, *args):
	code
*args is the naming convention.


=================
ERROR: THIS WON'T WORK
xxxxxxxxxxxxxxxxxxxxxxxx
def func_02(a, b, args*, d):
	code
xxxxxxxxxxxxxxxxxxxxxxxx
It works in normal unpacking; but not in functions arguments. Use keywords instead to rectify!
=================
Q:
Is the following code valid?

	def func_03(a, b, *c):
		print(a)
		print(b)
		print(c)

	func_03(10, 30)
	
A:
	Yes; a will be 10, b will be 30, and c will be an empty tuple.
	See 5. Function Parameters - 10. args.
	
=================
Q:
What is the name of (x)?
Why is x is used in this case?

def avg(*args):
	count = len(args)
	total = sum(args)
	return count and total/count	# x

A:
	x is in this case is used for short-circuiting.
	x is used to avoid division by zero.
	It seems you skipped a very important lesson in Numeric Types chapter (Booleans & Truthiness!!)
	
=================


****************	Booleans Section	****************

Backtracking to Booleans (Numeric Types Chapter) - Very Important!!!

=================

A boolean is a subclass of an integer.
	issubclass(bool, int)
	True
	
=================
Q:
What is the output of the following code?
	True == 1
A:
	True
=================

Q:
What is the output of the following code?
	0 == False
A:
	True
	
=================
Q:
What is the output of the following code?
	int(True)
A:
	1

=================
Q:
What is the output of the following code?
	int(False)
A:
	0
	
=================

Becareful; True and 1 are NOT the same objects.
They have different memory addresses!

Becareful; False and 0 are NOT the same objects.
They have different memory addresses!

id(0) != id(False)
True

id(1) != id(True)
True

=================
Q:
	What is the output of the following code?
	True + 1
A:
	2

=================

Q:
	What is the output of the following code?
	(True + True) * 4
A:
	8
=================

Q:
	What is the output of the following code?
	True < False
A:
	False
	
=================
Q:
	What is the output of the following code?
	(1 == 2) == 0
A:
	True
	False == False == True
	

=================
Q:
	Which is correct?
		a) issubclass(int, bool)
		b) issubclass(bool, int)
A:
	b - boolean is subclass of the integer type.
=================

id(3 < 4) == id(True)
(3 < 4) is True

=================

Q:
	What is the output of the following code?
	-True
A:
	-1
	
=================
Every object in python has a True truth value, except:
	1)	None
	2)	False
	3)	0
	4)	Empty sequences (e.g. tuple, list, string)
	5)	Empty mapping types (e.g. dictionary, set, etc)
	6)	Custom classes that implement __bool__ or __len__ 
		methods that returns 0 or False.


=================
Operator Precedence:
	()
	<	>	<=	>=	==	!=	in	is
	not
	and
	or
	
	Example:
		True or True and False
		True or (True and False)
		True or False == True
		
	Example:
		a < b or a > c and not x or y
		(a < b) or (a > c) and not x or y
		(a < b) or (a > c) and (not x) or y
		((a < b) or ((a > c)) and (not x)) or y
		
=================

Short-Circuiting:
	True or Y			Always return True
	False an Y			Always return False
	
=================

Short-Circuiting is useful here to avoid Zero Division Error!
a = 10
b = 0

if b and a/b > 2:
	print("a is at least twice b")

Since b is False the IF statement won't be executed.
The same goes for b == None.

=================
Example of using short-circuiting:

import string
name = "" # the user didn't provide a valid name in this case it's an empty string.

if name and name[0] in string.digits:
	print("Name cannot start with a digit.")


=================
Short-Circuiting revisited:
	x and y
	If x is truthy, evaluates y and returns it.
	If x is falsy, returns x.
	
	x or y
	If x is truthy, returns x; otherwise evaluates y and returns it.
	
	Application of OR:
	1)	Avoiding division by zero.		# This can be done using AND in a different manner.
	2)	Assigning default values.
	
	Example:
		1 or 1/0
		# In this example the division by zero won't be executed; because of short-circuiting.
		
	Example:
		s1 = None
		s2 = ""
		s3 = "abc"
		
		s1 = s1 or "n/a"
		s2 = s2 or "n/a"
		s3 = s3 or "n/a"
		
		print(s1, s2, s3)
		
		Output:
			("n/a", "n/a", "abc")
			# In this example the if s is falsy; we return "n/a"; otherwise we return s.
			
			
	In OR we look for true value; the first the better.
	In AND we look for false value; the latter the better.
	
	
	Example:
		You want to return the first character of a string s, or an empty string if
		the string is None or empty.
		
			if s:
				return s[0]
			else:
				return ""
 
=================
****************	Booleans Section	****************

=================
Q:
	Why is the following code will result in an exception?
	
	def func01(a, b, *args, d):
		print(a, b, args, d)
	
A:
	Because the function after exhausting the args (arguments) in the function signature, it will have to look for a keyword argument (d); and it will have nothing ... it was catched by the *args. 
	Thus after *args, keywords will have to be named.

=================
Q:
	The following function is wrong, how could you correct it?
	
	def func01(a, b, *args, d):
		print(a, b, args, d)

A:
	def func01(a, b, *args, d=3):
		print(a, b, args, d)
=================

Q:
	What are the differences between *args and **kwargs?

A:	
	1)	*args is used to scope up variable amount of remaining positional arguments.
	2) 	args are stored in a tuple
	3) 	*kwargs is used to scope up variable amount of remaining keyword arguments.
	4)	kwargs are stored in a dictionary.
	
=================

Q:
	Explain the following function signature:
		def func(*, d, **kwargs):
			# code
A:
	*			denotes:	we don't have any positional arguments.
	d			denotes:	d is a mandatory keyword argument.
	**kwargs	denotes:	kwargs will scope up any remaining keyword arguments.

=================

Q:
	What is the output of the following function?
		def func(*, d, **kwargs):
			print(f"d = {d}")
			print(f"kwargs = {kwargs}")
		
		func(d=1, a=2, b=3)
A:
	d = 1
	kwargs = {'a': 2, 'b': 3}
	
=================

Combining *args with *kwargs:
	1)	def func(a, b=1)
			# a is a mandatory argument; b defaults to 10 if not modified.
	2)	def func(a, b, *args)
			# a and b are a mandatory arguments; args scope up any additional arguments.
	3)	def func(a, b, *args, kw1, kw2=100)
			# a and b are a mandatory arguments; args scope up any additional arguments, kw1 is a mandatory argument, kw2 defaults to 100 if not modified.
	4)	def func(a, b, *, kw1, kw2=100)
			# a is a mandatory argument, b defaults to 10 if not modified; * (the star) indicates that we can't specify any additional arguments, kw1 is a mandatory argument, kw2 defaults to 100 if not modified.
	5)	def func(a, b, *args, kw1, kw2=100, **kwargs)
			# a and be are mandatory arguments, *args scope up any additional arguments, kw1 is a mandatory keyword argument, kw2 defaults to 100 if not modified, **kwargs scope up any additional keywords arguments.
	6)	def func(a, b=10, *, kw1, kw2=100, **kwargs)
			# a is a mandatory argument, b defaults to 10 if not modified, * (the star) indicates that we can't specify any additional arguments, kw1 is a mandatory keyword argument, kw2 defaults to 100 if not modified, **kwargs scope up any additional keywords arguments.
	7)	def func(*args)
			# args scope up any specified arguments; it can be zero arguments.
	8)	def func(**kwargs)
			# kwargs scope up any specified keywords arguments, it can be zero keyword arguments.
	9)	def (*args, **kwargs)
			# arbitrary number of arguments and keywords arguments; very common syntax.

=================

Q:
	What's wrong with the following code?
		def log(msg, *, dt=datetime.utcnow()):
			print(f'{dt}:{msg}')
A:
	dt=datetime.utcnow() in the function signature will be evaluated once; and that's it.
	That will result in it being one value; the value it was evaluated the first time.

=================
Q:
	Correct the following code so that dt reflect the current time.
		def log(msg, *, dt=datetime.utcnow()):
			print(f'{dt}:{msg}')
A:
	def log(msg, *, dt=None):
		dt = dt or datetime.utcnow()
		print(f'{dt}:{msg}')
		
		# Short-Circuiting is being used here; dt gets evaluated if it's falsy; None in this case.

=================

 Q:
	Why is it unwise to use mutable types (like list, dictionary etc) as a default function parameter, and used None instead?
	
A:
	Because the function definition runs once, and then that mutable parameter is modified every time we call the function; even for different variables.
=================

 Q:
	It is generally inadvisable to use mutable types (like list, dictionary etc) as a default function parameter, and use None instead, but that approach has some applications; show one.
	
A:
	Calculating factorial of a number.
		def factorial(n, cache={}):
			# cache is a mutable dictionary that gets created if not given by the user.
			# The dictionary cache is created once; and then gets updated as you call the function.
			
			if n < 1:
				return 1
			elif n in cache:
				return cache[n]
			else:
				print('calculating {0}!'.format(n))
				result = n * factorial(n-1)
				cache[n] = result
				return result
				
Check video titled [18. Parameter Defaults - Beware Again!!.mp4] for further info.
=================

Q:
	Why functions in Python are considered First-Class objects.
A:
	Because they meet the conditions that are required to be so.
	
=================

Q:
	What are the conditions for an object to be a First-Class object?
A:
	It can be passed to a function as an argument.
	It can be returned from a function.
	It can be assigned to a variable.
	It can be stored in a data structure (such as list, tuple, dictionary, etc.)
	
=================

Q:
	What is a Higher-Order functions?
A:
	A function that takes a function as an argument, or a function that returns a function.

=================
You can almose do anything with lambda that you can do with regular functions.
Consider:

fn = lamda x, *args, y, **kwargs: (x, args, y, kwargs)

=================

Q:
	Name typical applications of the lambda function.
A:
	Lambda is typically used where conciseness is desirable; for example in the case of a function that could use another function as an argument.
	
	sorted(iterable, key=None, reverse=False) function is one example.
	
	Example:
		l = ["c", "N", "a", "D", "B", "R", "A"]
		
		# Using the sorted function; we get:
		
		l1 = sorted(l)
		
		print(l1)
		
		['A', 'B', 'D', 'N', 'R', 'a', 'c']
		# What if we want to sort l alphabitcally (not ordinally), so that we get:
		# ['a', 'A', 'B', 'c', 'D', 'N', 'R']
		
		# We use a lambda function in the key argument of the sorted function.
		sorted(l, key=lambda x: x.upper())
		
		# note we could have used key=lambda x: x.lower()
		
	Example:
		d = {"def": 260, "abc": 300, "def": 26, "ghi": 33, "jkl": 3334}
		
		# If we want to get a list of keys in d, sorted by their values:
		l = sorted(d, key= lambda k: d[k])
		
		print(l)
		['def', 'ghi', 'abc', 'jkl']
		
	Example:
		l = ['Cleese', 'Idle', 'Palin', 'Chapman', 'Gilliam', 'Jones']
		
		# Sort by last character.
		
		sorted(l, key=lambda s: s[-1])
		
=================

Q:
	How to get a list of methods and attributes of a function func?
A:
	dir(func)
	
=================

Higher Order Function:
	Definition:
		A function that takes another function as a parameter or returns another function.
	
	Example of HOF:
		sorted
			it can take a function for the key keyword argument.
		map, filter too.
		
=================

map (func, *iterables)

The map function takes a function (func) and applies it to the elements of iterables.
It returns a map object which is an iterator; not a lists!

=================

map function examples:

Example 1:
	l = [2, 3, 4]
	
	def sq(x):
		return x**2
	
	y = map(sq, l)

Example 2:
	
	l1 = [1, 2, 3, 4, 5]
	l2 = [10, 20, 30, 40, 50]
	
	def mult(x, y):
		return x * y
		
	l3 = map(mult, l1, l2)
	
=================		

Q:
	What does a map function return?

A:
	A map object.

=================

Q:
	True or False, a map object is an iterable?

A:
	False, a map object is an iterator.
	
=================

Q:
	Is the following code valid in Python?
		l1 = [1, 2, 3]
		l2 = [10, 20, 30, 40, 50]

		def mult(x, y):
			return x * y

		l3 = map(mult, l1, l2)
		
A:
	Yes it's totally valid.
	
=================

Q:
	List two differences between the map function and the filter function.
	
A:
	1)	The filter function takes only a single iterable; unlike the map function which can take an arbitrary number of iterables.
	2) The filter function accept None as a function; in that case it filters out elements of the iterable based on their truthiness. Truthy elements are returned.
	
=================

Q:
	Without executing the following code; what is the value of y?
	
	x = range(4)
	y = list(filter(None, x))

A:
	[1, 2, 3] # 0 is dropped because it is Falsy!
	
=================

Q:
	True or False, zip function is a Higher Order Function?
A:
	False, yet it's very often used with HOF, hence the confusion.
	
=================

Example:
	s1 = "python"
	l1 = range(4)
	
	y = list(zip(s1, l1))
	print(y)
	[('p', 0), ('y', 1), ('t', 2), ('h', 3)]

	# Notice len(s1) != len(l1) 
	
Example:
	s1 = "python"
	l1 = range(5)
	d1 = {"a": 1, "b":3}
	
	y = list(zip(s1, l1))
	print(y)
	[('p', 0, 'a'), ('y', 1, 'b')]
	
	# We can take an arbitrary number of iterables; not only two!
	# The zip object length takes zip up to the least length of the iterables; in this case it is  d1.
	
Example:
	l1 = range(100)
	s1 = "python"
	print(len(l1), len(s1))
	print(list(zip(l1, s1)))

	100 6
	[(0, 'p'), (1, 'y'), (2, 't'), (3, 'h'), (4, 'o'), (5, 'n')]

=================
In python list comprehension is a better alternative to the map and the filter functions.

List Comprehension General Form:
	[<expression> for <var_name> in <iterable>]

Example:
	# List Comprehension in lieu of the map function:
	l1 = [1, 2, 3]
	l2 = [10, 20, 30]
	y = [x + y for x,y in zip(l1, l2)]
	print(y)

	[11, 22, 33]
	
Example:
	# List Comprehension in lieu of the filter function:
	l1 = range(6)

	print(list(filter(lambda n: n % 2 == 0, l1)))
	[0, 2, 4]
	# Only the truthy results were returned; in this case [0, 2, 4]
	
	# List Comprehension could be used instead of the filter function; by adding an if statement.
	print([i for i in l1 if i % 2 == 0])

List Comprehension to Filter Some Elements out:
	[<expression_01> for <var_name> in <iterable> if <expression_02>]

Compare readibility & conciseness between List Comprehension & the combination of filter and map Functions:

	filter + map:
		l1 = range(10)
		list(filter(lambda y: y < 25, map(lambda x: x**2, l1)))
		
	List Comprehension:
		l1 = range(10)
	[i**2 for i in l1 if i**2 < 25]
	
	# Clearly List Comprehension is more readible!
	
=================

Q:
	What is the value of y; if:
		s1 = {"1", "", None, 3}
		y = all(s1)
A:
	False
	
=================

Q:
	What is the value of y; if:
		s1 = {"1", "", None, 3}
		y = any(s1)
A:
	True
=================

Q:
	Give a list l1 = list(range(1,6)), use the reduce function to find the multiplication product of its elements.
	
A:
	from functools import reduce
	reduce(lambda a,b : a * b, l1)
	
=================

Q:
	Use the reduce function from the functools module to define a function that calculate the factorial of a given number.
	
A:
	from functools import reduce
	def get_fact(n):
		return reduce(lambda a, b: a * b, range(1, n+1))
	
	print(get_fact(6))
	720

=================	

Q:
	Use recursion to define a function that calculate the factorial of a given number.
	
A:
	def get_fact(n):
		return 1 if n < 2 else n * get_fact(n-1) 
	
	print(get_fact(6))
	720

=================

Q:
	Name a function that's imported from the functools module and it's used to set the default values of chosen arguments.
	
A:
	partial function.

=================

Q:
	What could go wrong with the following code that uses the functools partial function:
		
		from functools import partial
		
		def pow(base, exponent):
			return base**exponent
		
		cube = partial(pow, exponent=3)
		
A:
	For the cube variable, although the exponent default value has been set to 3 in the partial function, it is still changable. The following could happen:
	
	cube(5, exponent=2)
	
	So the partial function set the default value of some arguments, but it doesn't prevent us from changing the value of those arguments.
	
=================

Q:
	In programming what is the difference between compilation time and runtime?

A:
	Compile-time is the time at which the source code is converted into an executable code while the run time is the time at which the executable code is started running.

=================

Q:
	Explain whtat happens at compilation time and runtime; given the following code:
	
	def my_func(a, b):
		c = a * b
		return c
	
A:
	At compilation time:
		a, b and c are determined to be local variables
	At runtime:
		When the function my_func gets called, it starts executing.
		
=================

Q:
	Explain whtat happens at compilation time; given the following code:
	
	a = 10
	def my_func(b):
		print(True)
		print(a)
		print(b)
		
	my_func(300)
	
A:
	At compilation time the following happens:
		1)	The function my_func gets created.
		2)	b is being determined to be a local variable.
		
=================

Q:
	Given the followig code; what is the LAST print out on the screen?

	a = 0
	def my_func():
		a = 100
		print(a)
	
	my_func()
	
	print(a)

A:
	0

=================
[global keyword]
Q:
	Given the followig code; what is the LAST print out on the screen?

	a = 0
	def my_func():
		global a
		a = 100
		print(a)
	
	my_func()
	
	print(a)

A:
	100
	
=================
Q:	What is the value of a? [TRICK QUESTION]

	a = 10
	print(a)
	def my_func(n):
		global a
		a = 20
		c = a ** n
		return c
		
	print(a)
	
A:
	a = 10; Because we haven't called the function my_func yet.
	Once we call the function my_func() ... a becomes 20
	
=================

Q:
	Why is the following code will generate an error? [IMPORTANT]
	
		a = 10
		def my_func():
		  print("global a: ", a)
		  a = "hello world"
		  print(a)

		my_func()

A:
	Becasue at compile time a was determined by Python to be in the local scope; however it was referenced before assignment.
	The following error will be shown by Python:
		UnboundLocalError: local variable 'a' referenced before assignment

=================

Q: 
	List one application of decorators in Python and demonstrate its use in code.

A:
	One application is a counter function; that counts how many times another function has run.
	
	--------------------
	def counter(fn):
		print("Outer function is now running ...")
		count = 0
		def inner(*args, **kwargs):
			nonlocal count
			count += 1
			print("Inner function is now running ...")
			print(f"The name of the inner function is {fn.__name__}.")
			print(f"{fn.__name__} has run {count} times.")
			print(f"The arguments and keywords arguments are: {args, kwargs}.")
			return fn(*args, **kwargs)
		return inner
		
	@counter
	def add_func(a, b):
		return a + b
		
	add_func(3,56)
	--------------------
	
=================
Q:
	What is a decorator factory?

A:
	A decorator factory is a function that returns a decorator. 


=================
Q:
	Why would we use a decorator factory?

A:
	To paramaterize a decorator.

=================


Decorator Application (Dispatching):
	One excellent video that provides examples of the usefullness of decorators can be found in the following video of the Deep Dive 1: Python 3:
		7. Scopes, Closures and Decorators\19. Decorator Application (Dispatching) - Part 1.mp4
	
	Remember when you tried to create a function that lemmatize/stem Arabic words...
	See the video applied to html formatting ..... the same approach.
	A function that has a dictionary of functions that work in different scenarios (if elif else).

	Below a function that doesn't use decorators; but provide the justification for that.
	It's very simple function.
	--------------------	
	def htmlize(arg):
		'''This function takes an object; detect its type;
		Then apply a function to it [defined already].
		The registery dictionary contains the type and the function that's applicable to it.
		'''
		registery = {
			object: html_escape,
			int: html_int,
			float: html_real,
			Decimal: html_real,
			str: html_str,
			list: html_list,
			tuple: html_list,
			set: html_set,
			dict: html_dict
		}
		
		fn = registery.get(type(arg), register[object])
		return fn(arg)
	--------------------
=================

--------------------
	from functools import singledispatch
	from numbers import Integral
	from collections.abc import Sequence

	@singledispatch
	def do_something(a):
		print("Default function")
		return f"{a} is of type {type(a)}"
		
	do_something.registry

	@do_something.register(Sequence)
	def do_something_seq(s):
		print("This is a sequence type.")
		print(f"The object is {s} is of type {type(s)}")
		print(f"Multiplying object by 10 gives:\n{10*s}")
		
	@do_something.register(Integral)
	def do_something_integral(i):
		print("This is an integal type.")
		print(f"The object is {i} is of type {type(i)}")
		print(f"Multiplying object by 10 gives:\n{10*i}")
		
	do_something.dispatch(dict)
	do_something.dispatch(str)

	t1 = (1,3,5,6,7,8)
	d1 = {1: 3, 2: 6, 456: 5}
	s1 =  "Hello Python"

	do_something(t1)
	do_something(d1)
	do_something(s1)
--------------------

=================
Q:

	Using named tuple data structure create 3 points that have their the x, y and z coordinates as follows:
		pt1 = (13, 34, 0)
		pt2 = (3, 35, 6)
		pt3 = (32, 11, 5)

A:
	--------------------
		from collections import namedtuple
		Point3D = namedtuple("Point3D", list('xyz'))
		pt1 = Point3D(13, 34, 0)
		pt2 = Point3D(3, 35, 6)
		pt3 = Point3D(32, 11, 5)
	--------------------

=================

Q:
	List some advantages of using named tuple over creating your own class:

A:
	In named tuple represntation of the data is creating for us automatically.
		Point3D(x=32, y=11, z=5)
	In named tuple we don't have to creat equality or lt or gt methods; that's not the case if we're using a class.
		Point3D(x=3, y=35, z=6) < Point3D(x=32, y=11, z=5)
	In named tuple (just like ordinary tuple) we don't have to create __it__ method to iterate over the elements within it.
=================
Q:
	Are named tuples mutable or immutable?

A:
	immutable

=================
Q:
	What is the best approach in modifying a named tuple; like the following one:
		Point3D = namedtuple("Point3D", "x y z")
		pt1 = Point3D(10, 20, 30)
		Change y to 25.
		
A:
	--------------------
		from collections import namedtuple
		Point3D = namedtuple("Point3D", "x y z")
		pt1 = Point3D(10, 20, 30)
		pt1 = pt1._replace(y=25)
	--------------------
	
